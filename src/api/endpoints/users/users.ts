/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Vahana API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  APIResponseAdminReferrerResponseDto,
  APIResponseAdminReponseUserDto,
  APIResponseAdminReservationResponseDto,
  APIResponseBoolean,
  APIResponseForbiddenDto,
  APIResponseLatestReservationResponseDto,
  APIResponseReferrerResponseDto,
  APIResponseReservationResponseDto,
  APIResponseReserveResponse,
  APIResponseTicketResponseDto,
  APIResponseUnauthorizedDto,
  APIResponseUserResponseDto,
  CreateReservationDto,
  GetApiUsersIdReservationsParams,
  InviteUserDto,
  UpdateUserDto,
} from "../../model";
import { customAxios } from "../../mutator/customAxios";
import type { ErrorType } from "../../mutator/customAxios";

/**
 * Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
 * @summary Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getApiUsersId = (id: string, signal?: AbortSignal) => {
  return customAxios<APIResponseUserResponseDto>({
    url: `/api/users/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdQueryKey = (id: string) => {
  return [`/api/users/${id}`] as const;
};

export const getGetApiUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({
    signal,
  }) => getApiUsersId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersId>>
>;
export type GetApiUsersIdQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï¥àÎåÄ ÏΩîÎìú Î∞úÏÜ°. Ï¥àÎåÄ ÎßÅÌÅ¨Îäî https://front/signup?referrer={referrer}&sms={sms} ÌòïÏãùÏúºÎ°ú ÏßÑÌñâ
 * @summary Ï¥àÎåÄ ÏΩîÎìú Î∞úÏÜ°
 */
export const postApiUsersIdInvite = (
  id: string,
  inviteUserDto: InviteUserDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/users/${id}/invite`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: inviteUserDto,
    signal,
  });
};

export const getPostApiUsersIdInviteMutationOptions = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdInvite>>,
    TError,
    { id: string; data: InviteUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersIdInvite>>,
  TError,
  { id: string; data: InviteUserDto },
  TContext
> => {
  const mutationKey = ["postApiUsersIdInvite"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersIdInvite>>,
    { id: string; data: InviteUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiUsersIdInvite(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersIdInviteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersIdInvite>>
>;
export type PostApiUsersIdInviteMutationBody = InviteUserDto;
export type PostApiUsersIdInviteMutationError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary Ï¥àÎåÄ ÏΩîÎìú Î∞úÏÜ°
 */
export const usePostApiUsersIdInvite = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdInvite>>,
    TError,
    { id: string; data: InviteUserDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersIdInvite>>,
  TError,
  { id: string; data: InviteUserDto },
  TContext
> => {
  const mutationOptions = getPostApiUsersIdInviteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ï∂îÏ≤úÏù∏ Ï°∞Ìöå / refereeÎäî ÌîºÏ∂îÏ≤úÏù∏, referrerÎäî Ï∂îÏ≤úÏù∏
 * @summary Ï∂îÏ≤úÏù∏ Ï°∞Ìöå
 */
export const getApiUsersIdReferrer = (id: string, signal?: AbortSignal) => {
  return customAxios<APIResponseReferrerResponseDto>({
    url: `/api/users/${id}/referrer`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdReferrerQueryKey = (id: string) => {
  return [`/api/users/${id}/referrer`] as const;
};

export const getGetApiUsersIdReferrerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdReferrerQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdReferrer>>
  > = ({ signal }) => getApiUsersIdReferrer(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersIdReferrerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdReferrer>>
>;
export type GetApiUsersIdReferrerQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary Ï∂îÏ≤úÏù∏ Ï°∞Ìöå
 */

export function useGetApiUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiUsersIdReferrerQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [Ïñ¥ÎìúÎØº] Ìã∞Ïºì Ï°∞Ìöå
 * @summary [Ïñ¥ÎìúÎØº] Ìã∞Ïºì Ï°∞Ìöå
 */
export const getApiUsersIdTickets = (id: string, signal?: AbortSignal) => {
  return customAxios<APIResponseTicketResponseDto>({
    url: `/api/users/${id}/tickets`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdTicketsQueryKey = (id: string) => {
  return [`/api/users/${id}/tickets`] as const;
};

export const getGetApiUsersIdTicketsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdTickets>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdTickets>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdTicketsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdTickets>>
  > = ({ signal }) => getApiUsersIdTickets(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdTickets>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersIdTicketsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdTickets>>
>;
export type GetApiUsersIdTicketsQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ìã∞Ïºì Ï°∞Ìöå
 */

export function useGetApiUsersIdTickets<
  TData = Awaited<ReturnType<typeof getApiUsersIdTickets>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdTickets>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiUsersIdTicketsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏòàÏïΩ ÎÇ¥Ïó≠ Ï°∞Ìöå
 * @summary ÏòàÏïΩ ÎÇ¥Ïó≠ Ï°∞Ìöå
 */
export const getApiUsersIdReservations = (
  id: string,
  params: GetApiUsersIdReservationsParams,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseReservationResponseDto>({
    url: `/api/users/${id}/reservations`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiUsersIdReservationsQueryKey = (
  id: string,
  params: GetApiUsersIdReservationsParams,
) => {
  return [
    `/api/users/${id}/reservations`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiUsersIdReservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdReservations>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  params: GetApiUsersIdReservationsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdReservations>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdReservationsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdReservations>>
  > = ({ signal }) => getApiUsersIdReservations(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdReservations>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersIdReservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdReservations>>
>;
export type GetApiUsersIdReservationsQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary ÏòàÏïΩ ÎÇ¥Ïó≠ Ï°∞Ìöå
 */

export function useGetApiUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservations>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  params: GetApiUsersIdReservationsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdReservations>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiUsersIdReservationsQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏòàÏïΩ Ï∂îÍ∞Ä
 * @summary ÏòàÏïΩ Ï∂îÍ∞Ä
 */
export const postApiUsersIdReservations = (
  id: string,
  createReservationDto: CreateReservationDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseReserveResponse>({
    url: `/api/users/${id}/reservations`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createReservationDto,
    signal,
  });
};

export const getPostApiUsersIdReservationsMutationOptions = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdReservations>>,
    TError,
    { id: string; data: CreateReservationDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersIdReservations>>,
  TError,
  { id: string; data: CreateReservationDto },
  TContext
> => {
  const mutationKey = ["postApiUsersIdReservations"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersIdReservations>>,
    { id: string; data: CreateReservationDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiUsersIdReservations(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersIdReservationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersIdReservations>>
>;
export type PostApiUsersIdReservationsMutationBody = CreateReservationDto;
export type PostApiUsersIdReservationsMutationError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary ÏòàÏïΩ Ï∂îÍ∞Ä
 */
export const usePostApiUsersIdReservations = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdReservations>>,
    TError,
    { id: string; data: CreateReservationDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersIdReservations>>,
  TError,
  { id: string; data: CreateReservationDto },
  TContext
> => {
  const mutationOptions = getPostApiUsersIdReservationsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÏµúÍ∑º ÏòàÏïΩ ÎÇ¥Ïó≠ 1Í∞ú Ï°∞Ìöå
 * @summary ÏµúÍ∑º ÏòàÏïΩ ÎÇ¥Ïó≠ Ï°∞Ìöå
 */
export const getApiUsersIdReservationsLatest = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseLatestReservationResponseDto>({
    url: `/api/users/${id}/reservations/latest`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdReservationsLatestQueryKey = (id: string) => {
  return [`/api/users/${id}/reservations/latest`] as const;
};

export const getGetApiUsersIdReservationsLatestQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdReservationsLatestQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>
  > = ({ signal }) => getApiUsersIdReservationsLatest(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersIdReservationsLatestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>
>;
export type GetApiUsersIdReservationsLatestQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary ÏµúÍ∑º ÏòàÏïΩ ÎÇ¥Ïó≠ Ï°∞Ìöå
 */

export function useGetApiUsersIdReservationsLatest<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiUsersIdReservationsLatestQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [Ïñ¥ÎìúÎØº] Ïú†Ï†Ä Î™©Î°ù Ï°∞Ìöå
 * @summary [Ïñ¥ÎìúÎØº] Ïú†Ï†Ä Î™©Î°ù Ï°∞Ìöå
 */
export const getApiAdminUsers = (signal?: AbortSignal) => {
  return customAxios<APIResponseAdminReponseUserDto>({
    url: `/api/admin/users`,
    method: "GET",
    signal,
  });
};

export const getGetApiAdminUsersQueryKey = () => {
  return [`/api/admin/users`] as const;
};

export const getGetApiAdminUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAdminUsers>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsers>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAdminUsersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAdminUsers>>
  > = ({ signal }) => getApiAdminUsers(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiAdminUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAdminUsers>>
>;
export type GetApiAdminUsersQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïú†Ï†Ä Î™©Î°ù Ï°∞Ìöå
 */

export function useGetApiAdminUsers<
  TData = Awaited<ReturnType<typeof getApiAdminUsers>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsers>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiAdminUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [Ïñ¥ÎìúÎØº] Ïú†Ï†Ä Ï†ïÎ≥¥ ÏàòÏ†ï
 * @summary [Ïñ¥ÎìúÎØº] Ïú†Ï†Ä Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const patchApiAdminUsersId = (
  id: string,
  updateUserDto: UpdateUserDto,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/admin/users/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateUserDto,
  });
};

export const getPatchApiAdminUsersIdMutationOptions = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiAdminUsersId>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiAdminUsersId>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationKey = ["patchApiAdminUsersId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiAdminUsersId>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchApiAdminUsersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiAdminUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiAdminUsersId>>
>;
export type PatchApiAdminUsersIdMutationBody = UpdateUserDto;
export type PatchApiAdminUsersIdMutationError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïú†Ï†Ä Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const usePatchApiAdminUsersId = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiAdminUsersId>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiAdminUsersId>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationOptions = getPatchApiAdminUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * [Ïñ¥ÎìúÎØº] Ï∂îÏ≤úÏù∏ Ï°∞Ìöå
 * @summary [Ïñ¥ÎìúÎØº] Ï∂îÏ≤úÏù∏ Ï°∞Ìöå
 */
export const getApiAdminUsersIdReferrer = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseAdminReferrerResponseDto>({
    url: `/api/admin/users/${id}/referrer`,
    method: "GET",
    signal,
  });
};

export const getGetApiAdminUsersIdReferrerQueryKey = (id: string) => {
  return [`/api/admin/users/${id}/referrer`] as const;
};

export const getGetApiAdminUsersIdReferrerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAdminUsersIdReferrerQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>
  > = ({ signal }) => getApiAdminUsersIdReferrer(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiAdminUsersIdReferrerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>
>;
export type GetApiAdminUsersIdReferrerQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ï∂îÏ≤úÏù∏ Ï°∞Ìöå
 */

export function useGetApiAdminUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiAdminUsersIdReferrerQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [Ïñ¥ÎìúÎØº] Ïö¥Ìñâ ÌöüÏàò Ï°∞Ìöå
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ìñâ ÌöüÏàò Ï°∞Ìöå
 */
export const getApiAdminUsersIdReservations = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseAdminReservationResponseDto>({
    url: `/api/admin/users/${id}/reservations`,
    method: "GET",
    signal,
  });
};

export const getGetApiAdminUsersIdReservationsQueryKey = (id: string) => {
  return [`/api/admin/users/${id}/reservations`] as const;
};

export const getGetApiAdminUsersIdReservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAdminUsersIdReservationsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>
  > = ({ signal }) => getApiAdminUsersIdReservations(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiAdminUsersIdReservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>
>;
export type GetApiAdminUsersIdReservationsQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ìñâ ÌöüÏàò Ï°∞Ìöå
 */

export function useGetApiAdminUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiAdminUsersIdReservationsQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
