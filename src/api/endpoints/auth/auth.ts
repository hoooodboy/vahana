/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Vahana API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  APIResponseBoolean,
  APIResponseLoginResponseDto,
  APIResponseUnauthorizedDto,
  CreateUserDto,
  ForgotIdDto,
  ForgotPwDto,
  GetApiAuthKakaoHeaders,
  LoginDto,
  PostApiAuthLoginHeaders,
  SingUpDto,
} from "../../model";
import { customAxios } from "../../mutator/customAxios";

export const postApiAuthCreate = (
  createUserDto: CreateUserDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/auth/create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
    signal,
  });
};

export const getPostApiAuthCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ["postApiAuthCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthCreate>>
>;
export type PostApiAuthCreateMutationBody = CreateUserDto;
export type PostApiAuthCreateMutationError = unknown;

export const usePostApiAuthCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 로그인 처리. 리턴값으로 토큰을 주긴 하지만, 헤더에도 토큰을 세팅함(Authorization, Refresh)<br /><br />백단에서 액세스 토큰과 리프레시 토큰을 자동으로 갱신하는데,<br /> 프론트에서 axios 인터셉터 구현해서 토큰 갱신 처리 필요(response 헤더에 Authorization, Refresh 헤더가 있으면 토큰 갱신 처리)
 * @summary 로그인
 */
export const postApiAuthLogin = (
  loginDto: LoginDto,
  headers?: PostApiAuthLoginHeaders,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseLoginResponseDto>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json", ...headers },
    data: loginDto,
    signal,
  });
};

export const getPostApiAuthLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginDto; headers?: PostApiAuthLoginHeaders },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginDto; headers?: PostApiAuthLoginHeaders },
  TContext
> => {
  const mutationKey = ["postApiAuthLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    { data: LoginDto; headers?: PostApiAuthLoginHeaders }
  > = (props) => {
    const { data, headers } = props ?? {};

    return postApiAuthLogin(data, headers);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthLoginMutationBody = LoginDto;
export type PostApiAuthLoginMutationError = unknown;

/**
 * @summary 로그인
 */
export const usePostApiAuthLogin = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginDto; headers?: PostApiAuthLoginHeaders },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginDto; headers?: PostApiAuthLoginHeaders },
  TContext
> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiAuthSignup = (
  singUpDto: SingUpDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/auth/signup`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: singUpDto,
    signal,
  });
};

export const getPostApiAuthSignupMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    TError,
    { data: SingUpDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError,
  { data: SingUpDto },
  TContext
> => {
  const mutationKey = ["postApiAuthSignup"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    { data: SingUpDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthSignup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthSignup>>
>;
export type PostApiAuthSignupMutationBody = SingUpDto;
export type PostApiAuthSignupMutationError = unknown;

export const usePostApiAuthSignup = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    TError,
    { data: SingUpDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError,
  { data: SingUpDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 카카오 로그인을 진행.<br />유저 정보가 없을 시 회원가입 처리가 됨. https://front/signup?id={id}&provider=KAKAO 로 리다이렉트(id는 회원가입 폼에서 고정으로 해야함).<br />DB에 유저정보가 있으면 로그인 처리(헤더에 토큰 발급 - Authorization, Refresh)
 * @summary 카카오 로그인
 */
export const getApiAuthKakao = (
  headers: GetApiAuthKakaoHeaders,
  signal?: AbortSignal,
) => {
  return customAxios<void>({
    url: `/api/auth/kakao`,
    method: "GET",
    headers,
    signal,
  });
};

export const getGetApiAuthKakaoQueryKey = () => {
  return [`/api/auth/kakao`] as const;
};

export const getGetApiAuthKakaoQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthKakao>>,
  TError = unknown,
>(
  headers: GetApiAuthKakaoHeaders,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthKakao>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAuthKakaoQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthKakao>>> = ({
    signal,
  }) => getApiAuthKakao(headers, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthKakao>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAuthKakaoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthKakao>>
>;
export type GetApiAuthKakaoQueryError = unknown;

export function useGetApiAuthKakao<
  TData = Awaited<ReturnType<typeof getApiAuthKakao>>,
  TError = unknown,
>(
  headers: GetApiAuthKakaoHeaders,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthKakao>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthKakao>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthKakao>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAuthKakao<
  TData = Awaited<ReturnType<typeof getApiAuthKakao>>,
  TError = unknown,
>(
  headers: GetApiAuthKakaoHeaders,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthKakao>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthKakao>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthKakao>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAuthKakao<
  TData = Awaited<ReturnType<typeof getApiAuthKakao>>,
  TError = unknown,
>(
  headers: GetApiAuthKakaoHeaders,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthKakao>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 카카오 로그인
 */

export function useGetApiAuthKakao<
  TData = Awaited<ReturnType<typeof getApiAuthKakao>>,
  TError = unknown,
>(
  headers: GetApiAuthKakaoHeaders,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthKakao>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAuthKakaoQueryOptions(headers, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiAuthWithdraw = (signal?: AbortSignal) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/auth/withdraw`,
    method: "POST",
    signal,
  });
};

export const getPostApiAuthWithdrawMutationOptions = <
  TError = APIResponseUnauthorizedDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthWithdraw>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthWithdraw>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postApiAuthWithdraw"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthWithdraw>>,
    void
  > = () => {
    return postApiAuthWithdraw();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthWithdrawMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthWithdraw>>
>;

export type PostApiAuthWithdrawMutationError = APIResponseUnauthorizedDto;

export const usePostApiAuthWithdraw = <
  TError = APIResponseUnauthorizedDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthWithdraw>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthWithdraw>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiAuthWithdrawMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiAuthForgotPw = (
  forgotPwDto: ForgotPwDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/auth/forgot-pw`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: forgotPwDto,
    signal,
  });
};

export const getPostApiAuthForgotPwMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthForgotPw>>,
    TError,
    { data: ForgotPwDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthForgotPw>>,
  TError,
  { data: ForgotPwDto },
  TContext
> => {
  const mutationKey = ["postApiAuthForgotPw"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthForgotPw>>,
    { data: ForgotPwDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthForgotPw(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthForgotPwMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthForgotPw>>
>;
export type PostApiAuthForgotPwMutationBody = ForgotPwDto;
export type PostApiAuthForgotPwMutationError = unknown;

export const usePostApiAuthForgotPw = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthForgotPw>>,
    TError,
    { data: ForgotPwDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthForgotPw>>,
  TError,
  { data: ForgotPwDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthForgotPwMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiAuthForgotId = (
  forgotIdDto: ForgotIdDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/auth/forgot-id`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: forgotIdDto,
    signal,
  });
};

export const getPostApiAuthForgotIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthForgotId>>,
    TError,
    { data: ForgotIdDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthForgotId>>,
  TError,
  { data: ForgotIdDto },
  TContext
> => {
  const mutationKey = ["postApiAuthForgotId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthForgotId>>,
    { data: ForgotIdDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthForgotId(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthForgotIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthForgotId>>
>;
export type PostApiAuthForgotIdMutationBody = ForgotIdDto;
export type PostApiAuthForgotIdMutationError = unknown;

export const usePostApiAuthForgotId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthForgotId>>,
    TError,
    { data: ForgotIdDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthForgotId>>,
  TError,
  { data: ForgotIdDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthForgotIdMutationOptions(options);

  return useMutation(mutationOptions);
};
