/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Vahana API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  APIResponseBoolean,
  APIResponseDriverDetailResponseDto,
  APIResponseDriverResponseDto,
  APIResponseForbiddenDto,
  APIResponseUnauthorizedDto,
  CreateDriverDto,
  UpdateDriverDto,
} from "../../model";
import { customAxios } from "../../mutator/customAxios";
import type { ErrorType } from "../../mutator/customAxios";

/**
 * [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê Îì±Î°ù
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê Îì±Î°ù
 */
export const postApiDrivers = (
  createDriverDto: CreateDriverDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/drivers`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createDriverDto,
    signal,
  });
};

export const getPostApiDriversMutationOptions = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiDrivers>>,
    TError,
    { data: CreateDriverDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiDrivers>>,
  TError,
  { data: CreateDriverDto },
  TContext
> => {
  const mutationKey = ["postApiDrivers"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiDrivers>>,
    { data: CreateDriverDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiDrivers(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiDriversMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiDrivers>>
>;
export type PostApiDriversMutationBody = CreateDriverDto;
export type PostApiDriversMutationError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê Îì±Î°ù
 */
export const usePostApiDrivers = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiDrivers>>,
    TError,
    { data: CreateDriverDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiDrivers>>,
  TError,
  { data: CreateDriverDto },
  TContext
> => {
  const mutationOptions = getPostApiDriversMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê Î™©Î°ù Ï°∞Ìöå
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê Î™©Î°ù Ï°∞Ìöå
 */
export const getApiDrivers = (signal?: AbortSignal) => {
  return customAxios<APIResponseDriverResponseDto>({
    url: `/api/drivers`,
    method: "GET",
    signal,
  });
};

export const getGetApiDriversQueryKey = () => {
  return [`/api/drivers`] as const;
};

export const getGetApiDriversQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiDrivers>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiDrivers>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiDriversQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDrivers>>> = ({
    signal,
  }) => getApiDrivers(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiDrivers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiDriversQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiDrivers>>
>;
export type GetApiDriversQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê Î™©Î°ù Ï°∞Ìöå
 */

export function useGetApiDrivers<
  TData = Awaited<ReturnType<typeof getApiDrivers>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiDrivers>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiDriversQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏÉÅÏÑ∏ Ï°∞Ìöå
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getApiDriversId = (id: string, signal?: AbortSignal) => {
  return customAxios<APIResponseDriverDetailResponseDto>({
    url: `/api/drivers/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiDriversIdQueryKey = (id: string) => {
  return [`/api/drivers/${id}`] as const;
};

export const getGetApiDriversIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiDriversId>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiDriversId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiDriversIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDriversId>>> = ({
    signal,
  }) => getApiDriversId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiDriversId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiDriversIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiDriversId>>
>;
export type GetApiDriversIdQueryError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetApiDriversId<
  TData = Awaited<ReturnType<typeof getApiDriversId>>,
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiDriversId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiDriversIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏàòÏ†ï
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏàòÏ†ï
 */
export const patchApiDriversId = (
  id: string,
  updateDriverDto: UpdateDriverDto,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/drivers/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateDriverDto,
  });
};

export const getPatchApiDriversIdMutationOptions = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiDriversId>>,
    TError,
    { id: string; data: UpdateDriverDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiDriversId>>,
  TError,
  { id: string; data: UpdateDriverDto },
  TContext
> => {
  const mutationKey = ["patchApiDriversId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiDriversId>>,
    { id: string; data: UpdateDriverDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchApiDriversId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiDriversIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiDriversId>>
>;
export type PatchApiDriversIdMutationBody = UpdateDriverDto;
export type PatchApiDriversIdMutationError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏàòÏ†ï
 */
export const usePatchApiDriversId = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiDriversId>>,
    TError,
    { id: string; data: UpdateDriverDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiDriversId>>,
  TError,
  { id: string; data: UpdateDriverDto },
  TContext
> => {
  const mutationOptions = getPatchApiDriversIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏÇ≠Ï†ú
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏÇ≠Ï†ú
 */
export const deleteApiDriversId = (id: string) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/drivers/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiDriversIdMutationOptions = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiDriversId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiDriversId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiDriversId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiDriversId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiDriversId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiDriversIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiDriversId>>
>;

export type DeleteApiDriversIdMutationError = ErrorType<
  APIResponseUnauthorizedDto | APIResponseForbiddenDto
>;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïö¥Ï†ÑÏûê ÏÇ≠Ï†ú
 */
export const useDeleteApiDriversId = <
  TError = ErrorType<APIResponseUnauthorizedDto | APIResponseForbiddenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiDriversId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiDriversId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiDriversIdMutationOptions(options);

  return useMutation(mutationOptions);
};
