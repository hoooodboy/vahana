/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Vahana API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  APIResponseBoolean,
  APIResponseForbiddenDto,
  APIResponseUnauthorizedDto,
  CreateTicketDto,
} from "../../model";
import { customAxios } from "../../mutator/customAxios";

/**
 * [Ïñ¥ÎìúÎØº] Ìã∞ÏºìÏùÑ Î∂ÄÏó¨/ÎßåÎ£åÌï©ÎãàÎã§.<br />amountÍ∞Ä 0Ïù∏ Í≤ΩÏö∞ dateÎßåÌÅº ÎßåÎ£åÏùºÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
 * @summary [Ïñ¥ÎìúÎØº] Ìã∞Ïºì Î∂ÄÏó¨/ÎßåÎ£å
 */
export const postApiTickets = (
  createTicketDto: CreateTicketDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/tickets`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createTicketDto,
    signal,
  });
};

export const getPostApiTicketsMutationOptions = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTickets>>,
    TError,
    { data: CreateTicketDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTickets>>,
  TError,
  { data: CreateTicketDto },
  TContext
> => {
  const mutationKey = ["postApiTickets"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTickets>>,
    { data: CreateTicketDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiTickets(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTicketsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTickets>>
>;
export type PostApiTicketsMutationBody = CreateTicketDto;
export type PostApiTicketsMutationError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

/**
 * @summary [Ïñ¥ÎìúÎØº] Ìã∞Ïºì Î∂ÄÏó¨/ÎßåÎ£å
 */
export const usePostApiTickets = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTickets>>,
    TError,
    { data: CreateTicketDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTickets>>,
  TError,
  { data: CreateTicketDto },
  TContext
> => {
  const mutationOptions = getPostApiTicketsMutationOptions(options);

  return useMutation(mutationOptions);
};
